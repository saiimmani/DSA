#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int value;
    struct Node* left;
    struct Node* right;
};

// Create a new node
struct Node* newNode(int value) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->value = value;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Insert a node into the BST
struct Node* insert(struct Node* node, int value) {
    if (node == NULL) return newNode(value);

    if (value < node->value) {
        node->left = insert(node->left, value);
    } else if (value > node->value) {
        node->right = insert(node->right, value);
    }

    return node;
}

// Search for a value in the BST
struct Node* search(struct Node* node, int value) {
    if (node == NULL || node->value == value) {
        return node;
    }

    if (value < node->value) {
        return search(node->left, value);
    } else {
        return search(node->right, value);
    }
}

// Find the minimum value node in a subtree
struct Node* findMin(struct Node* node) {
    struct Node* current = node;
    while (current && current->left != NULL) {
        current = current->left;
    }
    return current;
}

// Delete a node from the BST
struct Node* deleteNode(struct Node* root, int value) {
    if (root == NULL) return root;

    if (value < root->value) {
        root->left = deleteNode(root->left, value);
    } else if (value > root->value) {
        root->right = deleteNode(root->right, value);
    } else {
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        struct Node* temp = findMin(root->right);
        root->value = temp->value;
        root->right = deleteNode(root->right, temp->value);
    }
    return root;
}

// In-Order Traversal (Left, Root, Right)
void inOrder(struct Node* node) {
    if (node == NULL) return;
    inOrder(node->left);
    printf("%d ", node->value);
    inOrder(node->right);
}

// Pre-Order Traversal (Root, Left, Right)
void preOrder(struct Node* node) {
    if (node == NULL) return;
    printf("%d ", node->value);
    preOrder(node->left);
    preOrder(node->right);
}

// Post-Order Traversal (Left, Right, Root)
void postOrder(struct Node* node) {
    if (node == NULL) return;
    postOrder(node->left);
    postOrder(node->right);
    printf("%d ", node->value);
}

// Main function to demonstrate the BST operations
int main() {
    struct Node* root = NULL;
    int choice, value;

    while (1) {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Print In-Order\n");
        printf("5. Print Pre-Order\n");
        printf("6. Print Post-Order\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                root = insert(root, value);
                printf("%d inserted.\n", value);
                break;
            case 2:
                printf("Enter value to search: ");
                scanf("%d", &value);
                struct Node* foundNode = search(root, value);
                if (foundNode != NULL) {
                    printf("%d found in the BST.\n", value);
                } else {
                    printf("%d not found in the BST.\n", value);
                }
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                root = deleteNode(root, value);
                printf("%d deleted (if existed).\n", value);
                break;
            case 4:
                printf("In-Order Traversal: ");
                inOrder(root);
                printf("\n");
                break;
            case 5:
                printf("Pre-Order Traversal: ");
                preOrder(root);
                printf("\n");
                break;
            case 6:
                printf("Post-Order Traversal: ");
                postOrder(root);
                printf("\n");
                break;
            case 7:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
