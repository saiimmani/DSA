#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int value;
    struct Node* left;
    struct Node* right;
};

// Create a new node
struct Node* newNode(int value) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->value = value;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Insert a node into the BST
struct Node* insert(struct Node* node, int value) {
    // If the tree is empty, return a new node
    if (node == NULL) return newNode(value);

    // Otherwise, recursively insert in the correct subtree
    if (value < node->value) {
        node->left = insert(node->left, value);
    } else if (value > node->value) {
        node->right = insert(node->right, value);
    }

    return node;
}

// In-Order Traversal (Left, Root, Right)
void inOrder(struct Node* node) {
    if (node == NULL) return;
    inOrder(node->left);
    printf("%d ", node->value);
    inOrder(node->right);
}

// Pre-Order Traversal (Root, Left, Right)
void preOrder(struct Node* node) {
    if (node == NULL) return;
    printf("%d ", node->value);
    preOrder(node->left);
    preOrder(node->right);
}

// Post-Order Traversal (Left, Right, Root)
void postOrder(struct Node* node) {
    if (node == NULL) return;
    postOrder(node->left);
    postOrder(node->right);
    printf("%d ", node->value);
}

// Main function
int main() {
    struct Node* root = NULL;
    int n, value;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    // Insert nodes into the BST
    for (int i = 0; i < n; i++) {
        printf("Enter value for node %d: ", i + 1);
        scanf("%d", &value);
        root = insert(root, value);
    }

    // Print the BST in different orders
    printf("\nIn-Order Traversal: ");
    inOrder(root);

    printf("\nPre-Order Traversal: ");
    preOrder(root);

    printf("\nPost-Order Traversal: ");
    postOrder(root);

    return 0;
}
