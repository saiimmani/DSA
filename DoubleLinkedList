#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <malloc.h>

struct node {
    int data;
    struct node *next;
    struct node *prev;
};

struct node *start = NULL;

struct node *create_ll(struct node *);
struct node *display(struct node *);
struct node *insert_beg(struct node *);
struct node *insert_end(struct node *);
struct node *insert_before(struct node *);
struct node *insert_after(struct node *);
struct node *delete_beg(struct node *);
struct node *delete_end(struct node *);
struct node *delete_node(struct node *);
struct node *delete_after(struct node *);

int main(int argc, char *argv[]) {
    int option;
    do {
        printf("\n\n **MAIN MENU **");
        printf("\n 1:  Create a list");
        printf("\n 2:  Display the list");
        printf("\n 3:  Add a node at the beginning");
        printf("\n 4:  Add a node at the end");
        printf("\n 5:  Add a node before a given node");
        printf("\n 6:  Add a node after a given node");
        printf("\n 7:  Delete a node from the beginning");
        printf("\n 8:  Delete a node from the end");
        printf("\n 9:  Delete a given node");
        printf("\n 10: Delete a node after a given node");
        printf("\n 11: EXIT");
        printf("\n\n Enter your option : ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                start = create_ll(start);
                printf("\n LINKED LIST CREATED");
                break;
            case 2:
                start = display(start);
                break;
            case 3:
                start = insert_beg(start);
                break;
            case 4:
                start = insert_end(start);
                break;
            case 5:
                start = insert_before(start);
                break;
            case 6:
                start = insert_after(start);
                break;
            case 7:
                start = delete_beg(start);
                break;
            case 8:
                start = delete_end(start);
                break;
            case 9:
                start = delete_node(start);
                break;
            case 10:
                start = delete_after(start);
                break;
        }
    } while (option != 11);
    getch();
    return 0;
}

struct node *create_ll(struct node *start) {
    struct node *new_node, *ptr;
    int num;
    printf("\n Enter -1 to end");
    printf("\n Enter the data : ");
    scanf("%d", &num);
    while (num != -1) {
        new_node = (struct node *)malloc(sizeof(struct node));
        new_node->data = num;
        new_node->next = NULL;
        new_node->prev = NULL;
        if (start == NULL) {
            start = new_node;
        } else {
            ptr = start;
            while (ptr->next != NULL)
                ptr = ptr->next;
            ptr->next = new_node;
            new_node->prev = ptr;
        }
        printf("\n Enter the data : ");
        scanf("%d", &num);
    }
    return start;
}

struct node *display(struct node *start) {
    struct node *ptr;
    ptr = start;
    while (ptr != NULL) {
        printf("\t %d", ptr->data);
        ptr = ptr->next;
    }
    return start;
}

struct node *insert_beg(struct node *start) {
    struct node *new_node;
    int num;
    printf("\n Enter the data : ");
    scanf("%d", &num);
    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = start;
    new_node->prev = NULL;
    if (start != NULL)
        start->prev = new_node;
    start = new_node;
    return start;
}

struct node *insert_end(struct node *start) {
    struct node *ptr, *new_node;
    int num;
    printf("\n Enter the data : ");
    scanf("%d", &num);
    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->data = num;
    new_node->next = NULL;
    if (start == NULL) {
        new_node->prev = NULL;
        start = new_node;
    } else {
        ptr = start;
        while (ptr->next != NULL)
            ptr = ptr->next;
        ptr->next = new_node;
        new_node->prev = ptr;
    }
    return start;
}

struct node *insert_before(struct node *start) {
    struct node *new_node, *ptr;
    int num, val;
    printf("\n Enter the data : ");
    scanf("%d", &num);
    printf("\n Enter the value before which the data has to be inserted : ");
    scanf("%d", &val);
    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->data = num;
    ptr = start;
    while (ptr->data != val)
        ptr = ptr->next;
    if (ptr->prev != NULL) {
        new_node->prev = ptr->prev;
        ptr->prev->next = new_node;
    } else {
        start = new_node;
        new_node->prev = NULL;
    }
    new_node->next = ptr;
    ptr->prev = new_node;
    return start;
}

struct node *insert_after(struct node *start) {
    struct node *new_node, *ptr;
    int num, val;
    printf("\n Enter the data : ");
    scanf("%d", &num);
    printf("\n Enter the value after which the data has to be inserted : ");
    scanf("%d", &val);
    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->data = num;
    ptr = start;
    while (ptr->data != val)
        ptr = ptr->next;
    new_node->next = ptr->next;
    if (ptr->next != NULL)
        ptr->next->prev = new_node;
    ptr->next = new_node;
    new_node->prev = ptr;
    return start;
}

struct node *delete_beg(struct node *start) {
    struct node *ptr;
    if (start == NULL) {
        printf("\n List is empty.");
        return start;
    }
    ptr = start;
    start = start->next;
    if (start != NULL)
        start->prev = NULL;
    free(ptr);
    return start;
}

struct node *delete_end(struct node *start) {
    struct node *ptr;
    if (start == NULL) {
        printf("\n List is empty.");
        return start;
    }
    ptr = start;
    while (ptr->next != NULL)
        ptr = ptr->next;
    if (ptr->prev != NULL)
        ptr->prev->next = NULL;
    else
        start = NULL;
    free(ptr);
    return start;
}

struct node *delete_node(struct node *start) {
    struct node *ptr;
    int val;
    printf("\n Enter the value of the node which has to be deleted: ");
    scanf("%d", &val);
    ptr = start;
    while (ptr->data != val)
        ptr = ptr->next;
    if (ptr->prev != NULL)
        ptr->prev->next = ptr->next;
    else
        start = ptr->next;
    if (ptr->next != NULL)
        ptr->next->prev = ptr->prev;
    free(ptr);
    return start;
}

struct node *delete_after(struct node *start) {
    struct node *ptr;
    int val;
    printf("\n Enter the value after which the node has to be deleted: ");
    scanf("%d", &val);
    ptr = start;
    while (ptr->data != val)
        ptr = ptr->next;
    if (ptr->next != NULL) {
        struct node *del_node = ptr->next;
        ptr->next = del_node->next;
        if (del_node->next != NULL)
            del_node->next->prev = ptr;
        free(del_node);
    } else {
        printf("\n No node exists after the given value.");
    }
    return start;
}
