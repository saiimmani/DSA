#include <stdio.h>
#include <stdlib.h>

// Define the node structure for the stack
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// Define the stack structure
typedef struct {
    Node *top; // Pointer to the top of the stack
} Stack;

// Function prototypes
void initStack(Stack *s);
int isEmpty(Stack *s);
void push(Stack *s, int value);
int pop(Stack *s);
int peek(Stack *s);
void display(Stack *s);

int main() {
    Stack s;
    int option, value;

    initStack(&s);

    do {
        printf("\n** STACK MENU **");
        printf("\n1: Push an element");
        printf("\n2: Pop an element");
        printf("\n3: Peek at the top element");
        printf("\n4: Display the stack");
        printf("\n5: EXIT");
        printf("\n\nEnter your option: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                printf("\nEnter the value to push: ");
                scanf("%d", &value);
                push(&s, value);
                printf("\nValue pushed.");
                break;
            case 2:
                if (isEmpty(&s)) {
                    printf("\nStack is empty.");
                } else {
                    value = pop(&s);
                    printf("\nPopped value: %d", value);
                }
                break;
            case 3:
                if (isEmpty(&s)) {
                    printf("\nStack is empty.");
                } else {
                    value = peek(&s);
                    printf("\nTop value: %d", value);
                }
                break;
            case 4:
                display(&s);
                break;
        }
    } while (option != 5);

    return 0;
}

// Initialize the stack
void initStack(Stack *s) {
    s->top = NULL; // Stack is empty
}

// Check if the stack is empty
int isEmpty(Stack *s) {
    return s->top == NULL;
}

// Push an element onto the stack
void push(Stack *s, int value) {
    Node *new_node = (Node *)malloc(sizeof(Node));
    if (!new_node) {
        printf("\nMemory allocation failed.");
        return;
    }
    new_node->data = value;
    new_node->next = s->top;
    s->top = new_node;
}

// Pop an element from the stack
int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("\nStack is empty.");
        return -1; // Return a sentinel value
    }
    Node *temp = s->top;
    int value = temp->data;
    s->top = s->top->next;
    free(temp);
    return value;
}

// Peek at the top element of the stack
int peek(Stack *s) {
    if (isEmpty(s)) {
        printf("\nStack is empty.");
        return -1; // Return a sentinel value
    }
    return s->top->data;
}

// Display the stack
void display(Stack *s) {
    if (isEmpty(s)) {
        printf("\nStack is empty.");
    } else {
        Node *current = s->top;
        printf("\nStack elements are:");
        while (current != NULL) {
            printf("\t%d", current->data);
            current = current->next;
        }
    }
}
