// Shortest Path Algorithm (Dijkstra)
#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

typedef pair<int, int> pii;

void dijkstra(vector<pii> graph[], int V, int src) {
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    vector<int> dist(V, INT_MAX);
    pq.push({0, src});
    dist[src] = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (auto x : graph[u]) {
            int v = x.first;
            int weight = x.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Vertex Distance from Source\n";
    for (int i = 0; i < V; i++)
        cout << i << "\t\t" << dist[i] << endl;
}

int main() {
    int V = 9;
    vector<pii> graph[V];
    graph[0].push_back({1, 4});
    graph[0].push_back({7, 8});
    graph[1].push_back({2, 8});
    graph[1].push_back({7, 11});
    graph[2].push_back({3, 7});
    graph[2].push_back({8, 2});
    graph[2].push_back({5, 4});
    graph[3].push_back({4, 9});
    graph[3].push_back({5, 14});
    graph[4].push_back({5, 10});
    graph[5].push_back({6, 2});
    graph[6].push_back({7, 1});
    graph[6].push_back({8, 6});
    graph[7].push_back({8, 7});
    dijkstra(graph, V, 0);
    return 0;
}

